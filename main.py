import os
import re
import sys
import io
import asyncio
import random
import shutil
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile, Message
from aiogram.filters import CommandStart, Command
import yt_dlp
from yt_dlp.utils import sanitize_filename, DownloadError, ExtractorError
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UTF-8 –≤—ã–≤–æ–¥–∞ ---
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')
os.environ["PYTHONUTF8"] = "1"

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ffmpeg ---
if not shutil.which("ffmpeg"):
    print("[ERROR] ‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.")
else:
    print("[DEBUG] ffmpeg –Ω–∞–π–¥–µ–Ω ‚úÖ")

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if ADMIN_ID == 0:
    raise ValueError("ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ ---
PERSISTENT_DIR = Path(os.getenv("DATA_DIR", "/data"))
AUDIO_DOWNLOAD_DIR = PERSISTENT_DIR / "downloaded_audio"
AUDIO_DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)
print(f"[DEBUG] –ê—É–¥–∏–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: {AUDIO_DOWNLOAD_DIR}")

# --- –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ YouTube ---
YOUTUBE_REGEX = re.compile(r"(https?://)?(www\.)?(youtube\.com|youtu\.be)/.+")
 
# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ ---
def load_proxies(file_path="proxies.txt"):
    path = Path(file_path)
    if not path.exists():
        return []
    return [line.strip() for line in path.read_text(encoding="utf-8").splitlines() if line.strip()]

proxies = load_proxies()
USE_PROXY = True

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç üëã</b>\n\n"
        "–Ø —É–º–µ—é —Å–∫–∞—á–∏–≤–∞—Ç—å <b>–∞—É–¥–∏–æ –∏–∑ YouTube</b>. üé∂\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ MP3.\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Koora (@xx00xxdanu)\n\n"
        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /info –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        parse_mode="HTML"
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /info ---
@dp.message(Command("info"))
async def info_handler(message: Message):
    await message.answer(
        "ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        "üé∂ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ YouTube –≤ MP3 (192 kbps)\n"
        "üì¶ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram ‚Äî 50 –ú–ë\n"
        "‚ö†Ô∏è –ü—Ä–∏ –æ—à–∏–±–∫–µ ¬´Video unavailable¬ª –ø–æ–ø—Ä–æ–±—É–π –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ (/proxy_on)\n\n"
        "üë®‚Äçüíª –ê–≤—Ç–æ—Ä: Koora (@xx00xxdanu)",
        parse_mode="HTML"
    )

# --- –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("proxy_on"))
async def proxy_on(message: Message):
    global USE_PROXY
    if message.from_user.id != ADMIN_ID:
        return
    USE_PROXY = True
    await message.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω—ã")

@dp.message(Command("proxy_off"))
async def proxy_off(message: Message):
    global USE_PROXY
    if message.from_user.id != ADMIN_ID:
        return
    USE_PROXY = False
    await message.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã")

@dp.message(Command("ahelp"))
async def help_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer(
        "<b>Help admins</b>\n\n"
        "/proxy_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏\n"
        "/proxy_off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
        parse_mode="HTML"
    )

@dp.message(Command("restart"))
async def restart_bot(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    python = sys.executable
    os.execl(python, python, *sys.argv)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube —Å—Å—ã–ª–æ–∫ ---
@dp.message()
async def handle_message(message: Message):
    url = message.text.strip()
    if not YOUTUBE_REGEX.match(url):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ YouTube. –û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return
    url = url.split("?")[0]
    await download_youtube_audio(message, url)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ ---
async def download_youtube_audio(message: Message, url: str):
    await message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ...")

    try:
        with yt_dlp.YoutubeDL({"quiet": True, "encoding": "utf-8"}) as ydl:
            info = ydl.extract_info(url, download=False)

        title = sanitize_filename(info.get("title", "audio"))
        title_safe = re.sub(r'[<>:"/\\|?*\x00-\x1F]', '_', title)
        outtmpl = str(AUDIO_DOWNLOAD_DIR / f"{title_safe}.%(ext)s")

        proxy = random.choice(proxies) if proxies and USE_PROXY else None

        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": outtmpl,
            "quiet": False,
            "noplaylist": True,
            "nocheckcertificate": True,
            "geo_bypass": True,
            "force_ipv4": True,
            "encoding": "utf-8",
            "http_headers": {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                              "AppleWebKit/537.36 (KHTML, like Gecko) "
                              "Chrome/123.0.0.0 Safari/537.36",
                "Accept-Language": "en-US,en;q=0.9",
            },
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
        }

        if proxy:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
            if proxy.endswith(":1080"):
                proxy_url = f"socks5h://{proxy}"   # socks5h –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ—Ç DNS —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
            else:
                proxy_url = f"http://{proxy}"
            ydl_opts["proxy"] = proxy_url
            print(f"[DEBUG] –ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–∫—Å–∏: {proxy_url}")
        else:
            print("[DEBUG] –ü—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")


        # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ---
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(url, download=True)
                downloaded_file = Path(ydl.prepare_filename(info_dict)).with_suffix(".mp3")

        except DownloadError as e:
            error_text = str(e)
            if "Video unavailable" in error_text or "This content isn‚Äôt available" in error_text:
                await message.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–≤–æ—ë–º —Ä–µ–≥–∏–æ–Ω–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ —Å YouTube.")
            elif "Private video" in error_text:
                await message.answer("üîí –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ. –Ø –Ω–µ –º–æ–≥—É –µ–≥–æ —Å–∫–∞—á–∞—Ç—å.")
            elif "Sign in to confirm your age" in error_text:
                await message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É. YouTube —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_text}")
            return

        except ExtractorError:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ.")
            return
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ---
        if downloaded_file.exists():
            try:
                await message.answer_audio(
                    FSInputFile(downloaded_file),
                    caption=f"üé∂ {title} @downloadmusic25_bot",
                    title=title
                )
            finally:
                downloaded_file.unlink(missing_ok=True)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        print(f"[ERROR] {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    async def main():
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            await dp.start_polling(bot)
        except Exception as e:
            print(f"[CRITICAL] –ë–æ—Ç —É–ø–∞–ª: {e}", flush=True)
            await asyncio.sleep(5)
            os.execl(sys.executable, sys.executable, *sys.argv)

    asyncio.run(main())
